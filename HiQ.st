SimpleSwitchMorph subclass: #Cell	instanceVariableNames: 'mouseAction'	classVariableNames: ''	poolDictionaries: ''	category: 'HiQ'!!Cell methodsFor: 'initialization' stamp: 'DL 10/1/2014 13:37'!initialize  super initialize.  self label:''.  self borderWidth: 2.  bounds := 0@0 corner: 80@80.  offColor := Color paleYellow.  onColor := Color paleBlue darker.  self useSquareCorners.  self turnOff.! !!Cell methodsFor: 'accessing' stamp: 'DL 10/1/2014 13:34'!mouseAction: aBlock     ^mouseAction := aBlock! !!Cell methodsFor: 'accessing' stamp: 'DL 9/30/2014 21:24'!mouseUp: anEvent	mouseAction value! !BorderedMorph subclass: #Game	instanceVariableNames: 'cells'	classVariableNames: ''	poolDictionaries: ''	category: 'HiQ'!!Game methodsFor: 'initialization' stamp: 'DL 9/30/2014 21:45'!cellsPerSide   ^7! !!Game methodsFor: 'initialization' stamp: 'DL 9/30/2014 22:04'!initialize	| sampleCell width height n |	super initialize.	n := self cellsPerSide.	sampleCell := Cell new.	width := sampleCell width.	height := sampleCell height.	self		bounds: (5 @ 5 extent: width * n @ (height * n) + (2 * self borderWidth)).	cells := Matrix				new: n				tabulate: [:i :j | self newCellAt: i at: j]! !!Game methodsFor: 'initialization' stamp: 'DL 10/1/2014 14:56'!newCellAt: i at: j"Create a cell for position (i,j) and add it to my on-screenrepresentation at the appropriate screen position. Answer the new cell"|hash c p origin|c := Cell new.origin := self innerBounds origin.self addMorph: c.c position: ((i - 1) * c width) @ ((j - 1) * c height) + origin.hash:= #(1 2 6 7).((hash includes: i) & (hash includes: j)) ifTrue: []ifFalse: [p := Peg new.self addMorph: p.p position: ((i - 1) * c width + 20) @ ((j - 1) * c height + 20) + origin.^p].! !!Game methodsFor: 'logic' stamp: 'DL 10/1/2014 14:39'!toggleNeighboursOfCellAt: i at: j(cells at: i at: j ) changeState.! !CircleMorph subclass: #Peg	instanceVariableNames: 'state'	classVariableNames: ''	poolDictionaries: ''	category: 'HiQ'!!Peg methodsFor: 'as yet unclassified' stamp: 'DL 10/1/2014 14:36'!changeState  color := Color red.! !!Peg methodsFor: 'as yet unclassified' stamp: 'DL 10/1/2014 14:55'!handleMouseDown: evt   color = Color black   ifTrue: [      color := Color red.   ]   ifFalse: [      color := Color black.   ]   ! !!Peg methodsFor: 'as yet unclassified' stamp: 'DL 10/1/2014 14:52'!handlesMouseDown: anEvent    ^true! !!Peg methodsFor: 'as yet unclassified' stamp: 'DL 10/1/2014 14:58'!handlesMouseUp: event  ^false.! !!Peg methodsFor: 'as yet unclassified' stamp: 'DL 10/1/2014 13:31'!initialize  super initialize.  self borderWidth: 1.  bounds := 0@0 corner: 40@40.  color := Color black.  state := 0.! !